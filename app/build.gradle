apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

def getApiProperty(String key) {
    return hasProperty(key) ? getProperty(key) : System.getenv(key)
}

def getStoreFilePath() {
    def storeFilePath = System.getenv("IMAGE_SEARCH_STORE_FILE")
    return (storeFilePath == null || storeFilePath.isEmpty()) ? "image_search_debug.keystore" : storeFilePath
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.hpedrorodrigues.imagesearch"

        minSdkVersion 15
        targetSdkVersion 25

        versionCode 2
        versionName "1.0.1"

        buildConfigField "String", "CSE_API_KEY", getApiProperty('cseApiKey')
        buildConfigField "String", "FLICKR_API_KEY", getApiProperty('flickrApiKey')
        buildConfigField "String", "IMGUR_API_CLIENT_ID", getApiProperty('imgurApiClientId')
        buildConfigField "String", "STREET_VIEW_API_KEY", getApiProperty('streetViewApiKey')
        buildConfigField "String", "BING_API_KEY", getApiProperty('bingSearchApiKey')
        buildConfigField "String", "PIXABAY_API_KEY", getApiProperty('pixabayApiKey')
        buildConfigField "String", "GIPHY_API_KEY", getApiProperty('giphyApiKey')
    }

    signingConfigs {
        release {
            storeFile file(getStoreFilePath())
            storePassword System.getenv("IMAGE_SEARCH_STORE_PASSWORD")
            keyAlias System.getenv("IMAGE_SEARCH_STORE_KEY_ALIAS")
            keyPassword System.getenv("IMAGE_SEARCH_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            shrinkResources false
            useProguard false
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'
        }

        debug {
            shrinkResources false
            useProguard false
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

buildscript {
    repositories { maven { url 'https://maven.fabric.io/public' } }

    dependencies { classpath 'io.fabric.tools:gradle:1.21.7' }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "http://dl.bintray.com/jlmd/maven" }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support:design:25.1.0'
    compile 'com.android.support:cardview-v7:25.1.0'
    compile 'com.etsy.android.grid:library:1.0.5'
    compile 'com.wang.avi:library:1.0.5'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.koushikdutta.ion:ion:2.1.9'
    compile 'com.github.jlmd:AnimatedCircleLoadingView:1.1.5'
    compile('de.psdev.licensesdialog:licensesdialog:1.8.1') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    compile 'com.google.dagger:dagger:2.8'
    compile 'com.karumi:dexter:3.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.jakewharton.timber:timber:4.4.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true
    }
    compile 'com.google.android.gms:play-services-analytics:9.0.1'
    compile 'com.google.firebase:firebase-messaging:9.0.1'
    compile 'com.github.chrisbanes:PhotoView:1.3.1'

    apt 'com.google.dagger:dagger-compiler:2.8'

    provided 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'commons-io:commons-io:2.4'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
}

apply plugin: 'com.google.gms.google-services'